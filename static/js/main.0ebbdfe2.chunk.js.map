{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInputLyrics","setState","inputLyrics","document","getElementById","value","submit","asyncToGenerator","regenerator_default","a","mark","_callee","apiUrl","resp","respJson","answer","wrap","_context","prev","next","loadingAPI","window","location","hostname","host","concat","fetch","method","headers","Content-Type","body","JSON","stringify","lyrics","state","sent","t0","abrupt","ok","json","split","map","line","i","trim","length","Array","isArray","chords","join","react_default","createElement","stop","getFooter","style","position","left","bottom","width","backgroundColor","color","textAlign","fontSize","href","target","rel","Icon","name","lineHeight","Form","autoComplete","TextArea","id","placeholder","minHeight","minWidth","onChange","Button","loading","onClick","marginTop","disabled","className","src","logo","alt","height","Component","Boolean","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+UC2JzBC,sBApJb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,kBAAoB,WAClBP,EAAKQ,SAAS,CACZC,YAAaC,SAASC,eAAe,gBAAgBC,SAVtCZ,EA4DnBa,OA5DmBZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KA4DV,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAAC,EAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACP1B,EAAKQ,SAAS,CAAEmB,YAAY,IAExBR,EACF,4FAE6B,cAA7BS,OAAOC,SAASC,UACS,mBAAzBF,OAAOC,SAASE,OAEhBZ,EAAM,UAAAa,OAAaJ,OAAOC,SAASE,KAA7B,eATDP,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAcQO,MAAMd,EAAQ,CACzBe,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,OAAQxC,EAAKyC,MAAMhC,gBApBlB,OAcLW,EAdKI,EAAAkB,KAAAlB,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,EAAAD,EAAAmB,GAAAnB,EAAA,SAwBLxB,EAAKQ,SAAS,CAAEmB,YAAY,IAxBvBH,EAAAoB,OAAA,qBA4BP5C,EAAKQ,SAAS,CAAEmB,YAAY,IAEvBP,EAAKyB,GA9BH,CAAArB,EAAAE,KAAA,gBAAAF,EAAAoB,OAAA,yBAAApB,EAAAE,KAAA,GAkCgBN,EAAK0B,OAlCrB,QAkCDzB,EAlCCG,EAAAkB,KAoCDpB,EAAStB,EAAKyC,MAAMhC,YACvBsC,MAAM,MACNC,IAAI,SAACC,EAAMC,GACV,OAA2B,IAAvBD,EAAKE,OAAOC,OACPH,EAEJI,MAAMC,QAAQjC,EAASkC,OAAOL,IAInC,GAAAlB,OAAUiB,EAAV,MAAAjB,OAAmBX,EAASkC,OAAOL,GAAGM,KAAK,KAA3C,KAHSP,IAKVD,IAAI,SAAAC,GAAI,OACPQ,EAAAzC,EAAA0C,cAAA,YACGT,EACDQ,EAAAzC,EAAA0C,cAAA,cAIN1D,EAAKQ,SAAS,CACZc,OAAQA,IAxDH,yBAAAE,EAAAmC,SAAAzC,EAAA,iBA5DUlB,EAwHnB4D,UAAY,WACV,OACEH,EAAAzC,EAAA0C,cAAA,OACEG,MAAO,CACLC,SAAU,QACVC,KAAM,EACNC,OAAQ,EACRC,MAAO,OACPC,gBAAiB,UACjBC,MAAO,QACPC,UAAW,WARf,aAWYX,EAAAzC,EAAA0C,cAAA,QAAMG,MAAO,CAAEQ,SAAU,QAASF,MAAO,QAAzC,UAXZ,mBAYe,IACbV,EAAAzC,EAAA0C,cAAA,KACEY,KAAK,6BACLC,OAAO,SACPC,IAAI,sBACJX,MAAO,CAAEM,MAAO,UAEhBV,EAAAzC,EAAA0C,cAACe,EAAA,EAAD,CAAMC,KAAK,cA3IjB1E,EAAKyC,MAAQ,CACXhC,YAAa,GACbkB,YAAY,GAJG3B,wEAejB,IAAIqC,EA0BJ,OAxBEA,EADElC,KAAKsC,MAAMnB,OACNmC,EAAAzC,EAAA0C,cAAA,KAAGG,MAAO,CAAEc,WAAY,MAAQxE,KAAKsC,MAAMnB,QAGhDmC,EAAAzC,EAAA0C,cAACkB,EAAA,EAAD,CAAMC,aAAa,OACjBpB,EAAAzC,EAAA0C,cAACoB,EAAA,EAAD,CACEC,GAAG,eACHC,YAAY,YACZnB,MAAO,CAAEoB,UAAW,IAAKC,SAAU,KACnCC,SAAUhF,KAAKI,oBAEjBkD,EAAAzC,EAAA0C,cAAA,WACAD,EAAAzC,EAAA0C,cAAC0B,EAAA,EAAD,CACEC,QAASlF,KAAKsC,MAAMd,WACpB2D,QAASnF,KAAKU,OACdgD,MAAO,CAAE0B,UAAW,QACpBC,SAAmD,IAAzCrF,KAAKsC,MAAMhC,YAAY0C,OAAOC,OACxCe,MAAM,QALR,WAcJV,EAAAzC,EAAA0C,cAAA,OAAK+B,UAAU,OACbhC,EAAAzC,EAAA0C,cAAA,UAAQ+B,UAAU,cAChBhC,EAAAzC,EAAA0C,cAAA,OACEgC,IAAKC,IACLC,IAAI,OACJ/B,MAAO,CACL0B,UAAW,OACXM,OAAQ,WAGZpC,EAAAzC,EAAA0C,cAAA,8BACCrB,GAEFlC,KAAKyD,oBAxDIkC,cCMEC,QACW,cAA7BnE,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASkE,MACvB,2DCZNC,IAASC,OAAOzC,EAAAzC,EAAA0C,cAACyC,EAAD,MAASzF,SAASC,eAAe,SD2H3C,kBAAmByF,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ebbdfe2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7e46385.png\";","import React, { Component } from \"react\";\nimport logo from \"./logo.png\";\nimport \"./App.css\";\nimport { Form, Button, TextArea, Icon } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputLyrics: \"\",\n      loadingAPI: false\n    };\n  }\n\n  updateInputLyrics = () => {\n    this.setState({\n      inputLyrics: document.getElementById(\"input-lyrics\").value\n    });\n  };\n\n  render() {\n    let body;\n    if (this.state.answer) {\n      body = <p style={{ lineHeight: 1.2 }}>{this.state.answer}</p>;\n    } else {\n      body = (\n        <Form autoComplete=\"off\">\n          <TextArea\n            id=\"input-lyrics\"\n            placeholder=\"Lyrics...\"\n            style={{ minHeight: 200, minWidth: 300 }}\n            onChange={this.updateInputLyrics}\n          />\n          <br />\n          <Button\n            loading={this.state.loadingAPI}\n            onClick={this.submit}\n            style={{ marginTop: \"10px\" }}\n            disabled={this.state.inputLyrics.trim().length === 0}\n            color=\"blue\"\n          >\n            Submit\n          </Button>\n        </Form>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            src={logo}\n            alt=\"logo\"\n            style={{\n              marginTop: \"10px\",\n              height: \"150px\"\n            }}\n          />\n          <h1>Lyrics to Chords</h1>\n          {body}\n        </header>\n        {this.getFooter()}\n      </div>\n    );\n  }\n\n  submit = async () => {\n    this.setState({ loadingAPI: true });\n\n    let apiUrl =\n      \"https://wt-9ea9cc716197cc2580930513c1f0b64d-0.sandbox.auth0-extend.com/Lyrics2ChordsProxy\";\n    if (\n      window.location.hostname === \"localhost\" &&\n      window.location.host !== \"localhost:3000\"\n    ) {\n      apiUrl = `http://${window.location.host}/to_chords`;\n    }\n\n    let resp;\n    try {\n      resp = await fetch(apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          lyrics: this.state.inputLyrics\n        })\n      });\n    } catch (e) {\n      this.setState({ loadingAPI: false });\n      return;\n    }\n\n    this.setState({ loadingAPI: false });\n\n    if (!resp.ok) {\n      return;\n    }\n\n    const respJson = await resp.json();\n\n    const answer = this.state.inputLyrics\n      .split(\"\\n\")\n      .map((line, i) => {\n        if (line.trim().length === 0) {\n          return line;\n        }\n        if (!Array.isArray(respJson.chords[i])) {\n          return line;\n        }\n\n        return `${line} (${respJson.chords[i].join(\" \")})`;\n      })\n      .map(line => (\n        <span>\n          {line}\n          <br />\n        </span>\n      ));\n\n    this.setState({\n      answer: answer\n    });\n  };\n\n  getFooter = () => {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          left: 0,\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"#e7e7e7\",\n          color: \"black\",\n          textAlign: \"center\"\n        }}\n      >\n        Made with <span style={{ fontSize: \"large\", color: \"red\" }}>â™¥</span> by\n        Gefen Keinan{\" \"}\n        <a\n          href=\"https://github.com/gefenk9\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"black\" }}\n        >\n          <Icon name=\"github\" />\n        </a>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}