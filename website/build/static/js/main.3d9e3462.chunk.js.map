{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","mainImage","logo","react_default","a","createElement","style","position","left","bottom","width","backgroundColor","color","textAlign","fontSize","href","target","rel","Icon","name","className","src","alt","marginTop","height","Form","autoComplete","TextArea","placeholder","minHeight","minWidth","Button","loading","loadingAPI","onClick","submit","disabled","uploadedImageB64","username","usernameError","getFooter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qTCmFzBC,sBA5Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,UAAWC,KAJIV,2EASjB,OACEW,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLC,SAAU,QACVC,KAAM,EACNC,OAAQ,EACRC,MAAO,OACPC,gBAAiB,UACjBC,MAAO,QACPC,UAAW,WARf,aAWYV,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAAEQ,SAAU,QAASF,MAAO,QAAzC,UAXZ,mBAYe,IACbT,EAAAC,EAAAC,cAAA,KACEU,KAAK,6BACLC,OAAO,SACPC,IAAI,sBACJX,MAAO,CAAEM,MAAO,UAEhBT,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,KAAK,8CA2CjB,OAnCEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAAA,UAAQe,UAAU,cAChBjB,EAAAC,EAAAC,cAAA,OACEgB,IAAK1B,KAAKI,MAAME,UAChBqB,IAAI,OACJhB,MAAO,CACLiB,UAAW,OACXC,OAAQ,WAGZrB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,aAAa,OACjBvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACEC,YAAY,YACZtB,MAAO,CAAEuB,UAAW,IAAKC,SAAU,OAErC3B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACEC,QAASrC,KAAKI,MAAMkC,WACpBC,QAASvC,KAAKwC,OACd7B,MAAO,CAAEiB,UAAW,QACpBa,UACGzC,KAAKI,MAAMsC,mBACX1C,KAAKI,MAAMuC,UACZ3C,KAAKI,MAAMwC,cAEb3B,MAAM,QATR,YAeHjB,KAAK6C,oBAtEIC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3d9e3462.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b7e46385.png\";","import React, { Component } from \"react\";\nimport logo from \"./logo.png\";\nimport \"./App.css\";\nimport { Form, Button, TextArea, Icon } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      mainImage: logo\n    };\n  }\n\n  getFooter() {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          left: 0,\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"#e7e7e7\",\n          color: \"black\",\n          textAlign: \"center\"\n        }}\n      >\n        Made with <span style={{ fontSize: \"large\", color: \"red\" }}>â™¥</span> by\n        Gefen Keinan{\" \"}\n        <a\n          href=\"https://github.com/gefenk9\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"black\" }}\n        >\n          <Icon name=\"github\" />\n        </a>\n      </div>\n    );\n  }\n\n  render() {\n    let body = (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            src={this.state.mainImage}\n            alt=\"logo\"\n            style={{\n              marginTop: \"10px\",\n              height: \"150px\"\n            }}\n          />\n          <h1>Lyrics to Chords</h1>\n          <Form autoComplete=\"off\">\n            <TextArea\n              placeholder=\"Lyrics...\"\n              style={{ minHeight: 200, minWidth: 300 }}\n            />\n            <br />\n            <Button\n              loading={this.state.loadingAPI}\n              onClick={this.submit}\n              style={{ marginTop: \"10px\" }}\n              disabled={\n                !this.state.uploadedImageB64 ||\n                !this.state.username ||\n                this.state.usernameError\n              }\n              color=\"blue\"\n            >\n              Submit\n            </Button>\n          </Form>\n        </header>\n        {this.getFooter()}\n      </div>\n    );\n    return body;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}